# role: infra
# purpose: Kubernetes deployment configuration for MEV-V3 with auto-scaling and high availability
# dependencies: [kubernetes:1.28+, prometheus, grafana]
# mutation_ready: true
# test_status: [ci_passed, sim_passed, chaos_passed, adversarial_passed]

---
apiVersion: v1
kind: Namespace
metadata:
  name: mev-v3
  labels:
    project_bible_compliant: "true"
    mutation_ready: "true"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mev-config
  namespace: mev-v3
data:
  PROJECT_BIBLE_COMPLIANT: "true"
  MUTATION_READY: "true"
  LOG_LEVEL: "INFO"
  SIMULATION_MODE: "false"
  CHAOS_TESTING_ENABLED: "true"
  
---
apiVersion: v1
kind: Secret
metadata:
  name: mev-secrets
  namespace: mev-v3
type: Opaque
stringData:
  GCP_PROJECT_ID: "mev-og"
  # Secrets will be populated from GCP Secret Manager

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mev-engine
  namespace: mev-v3
  labels:
    app: mev-engine
    role: core
    mutation_ready: "true"
spec:
  replicas: 3  # High availability
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0  # Zero downtime
  selector:
    matchLabels:
      app: mev-engine
  template:
    metadata:
      labels:
        app: mev-engine
        role: core
        project_bible_compliant: "true"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: mev-engine-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      
      # Anti-affinity for high availability
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - mev-engine
            topologyKey: kubernetes.io/hostname
      
      containers:
      - name: mev-engine
        image: gcr.io/mev-og/mev-v3:latest
        imagePullPolicy: Always
        
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        
        envFrom:
        - configMapRef:
            name: mev-config
        - secretRef:
            name: mev-secrets
        
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
        
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
        - name: data
          mountPath: /app/data
        
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      - name: data
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: mev-engine
  namespace: mev-v3
  labels:
    app: mev-engine
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: http
  - name: metrics
    port: 9090
    targetPort: metrics
  selector:
    app: mev-engine

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: mev-engine-hpa
  namespace: mev-v3
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: mev-engine
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: mev_sharpe_ratio
      target:
        type: AverageValue
        averageValue: "2.5"  # PROJECT_BIBLE threshold
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 2
        periodSeconds: 15

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: mev-engine-pdb
  namespace: mev-v3
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: mev-engine

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mev-engine-sa
  namespace: mev-v3
  annotations:
    iam.gke.io/gcp-service-account: mev-engine@mev-og.iam.gserviceaccount.com

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: mev-engine-netpol
  namespace: mev-v3
spec:
  podSelector:
    matchLabels:
      app: mev-engine
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 9090
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8080
  egress:
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 443  # HTTPS
    - protocol: TCP
      port: 8545 # Ethereum RPC
    - protocol: TCP
      port: 8546 # Ethereum WS

---
# Monitoring components
apiVersion: v1
kind: Service
metadata:
  name: mev-prometheus
  namespace: mev-v3
  labels:
    app: prometheus
spec:
  type: ClusterIP
  ports:
  - port: 9090
    targetPort: 9090
  selector:
    app: prometheus

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: mev-v3
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus-sa
      containers:
      - name: prometheus
        image: prom/prometheus:v2.45.0
        args:
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/prometheus
        - --web.console.libraries=/usr/share/prometheus/console_libraries
        - --web.console.templates=/usr/share/prometheus/consoles
        ports:
        - containerPort: 9090
        volumeMounts:
        - name: config
          mountPath: /etc/prometheus
        - name: storage
          mountPath: /prometheus
      volumes:
      - name: config
        configMap:
          name: prometheus-config
      - name: storage
        emptyDir: {}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: mev-v3
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    
    scrape_configs:
    - job_name: 'mev-engine'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - mev-v3
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-sa
  namespace: mev-v3

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus-sa
  namespace: mev-v3

---
# Grafana for visualization
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: mev-v3
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:10.0.0
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-secret
              key: admin-password
        volumeMounts:
        - name: storage
          mountPath: /var/lib/grafana
      volumes:
      - name: storage
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: mev-v3
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 3000
  selector:
    app: grafana

---
# DRP/Chaos testing CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: drp-chaos-drill
  namespace: mev-v3
spec:
  schedule: "0 0 * * 0"  # Weekly on Sunday
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: chaos-drill
            image: gcr.io/mev-og/chaos-runner:latest
            command:
            - python
            - -m
            - drp.chaos_drill
            env:
            - name: CHAOS_LEVEL
              value: "medium"
            - name: TARGET_NAMESPACE
              value: "mev-v3"
          restartPolicy: OnFailure
